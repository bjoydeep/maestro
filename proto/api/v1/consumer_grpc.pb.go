// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/consumer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsumerRegistration_List_FullMethodName = "/v1.ConsumerRegistration/List"
	ConsumerRegistration_Read_FullMethodName = "/v1.ConsumerRegistration/Read"
)

// ConsumerRegistrationClient is the client API for ConsumerRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerRegistrationClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerList, error)
	Read(ctx context.Context, in *ConsumerReadRequest, opts ...grpc.CallOption) (*Consumer, error)
}

type consumerRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerRegistrationClient(cc grpc.ClientConnInterface) ConsumerRegistrationClient {
	return &consumerRegistrationClient{cc}
}

func (c *consumerRegistrationClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerList, error) {
	out := new(ConsumerList)
	err := c.cc.Invoke(ctx, ConsumerRegistration_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerRegistrationClient) Read(ctx context.Context, in *ConsumerReadRequest, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, ConsumerRegistration_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerRegistrationServer is the server API for ConsumerRegistration service.
// All implementations must embed UnimplementedConsumerRegistrationServer
// for forward compatibility
type ConsumerRegistrationServer interface {
	List(context.Context, *emptypb.Empty) (*ConsumerList, error)
	Read(context.Context, *ConsumerReadRequest) (*Consumer, error)
	mustEmbedUnimplementedConsumerRegistrationServer()
}

// UnimplementedConsumerRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerRegistrationServer struct {
}

func (UnimplementedConsumerRegistrationServer) List(context.Context, *emptypb.Empty) (*ConsumerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConsumerRegistrationServer) Read(context.Context, *ConsumerReadRequest) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedConsumerRegistrationServer) mustEmbedUnimplementedConsumerRegistrationServer() {}

// UnsafeConsumerRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerRegistrationServer will
// result in compilation errors.
type UnsafeConsumerRegistrationServer interface {
	mustEmbedUnimplementedConsumerRegistrationServer()
}

func RegisterConsumerRegistrationServer(s grpc.ServiceRegistrar, srv ConsumerRegistrationServer) {
	s.RegisterService(&ConsumerRegistration_ServiceDesc, srv)
}

func _ConsumerRegistration_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerRegistrationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerRegistration_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerRegistrationServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerRegistration_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerRegistrationServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerRegistration_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerRegistrationServer).Read(ctx, req.(*ConsumerReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerRegistration_ServiceDesc is the grpc.ServiceDesc for ConsumerRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ConsumerRegistration",
	HandlerType: (*ConsumerRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ConsumerRegistration_List_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ConsumerRegistration_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/consumer.proto",
}
